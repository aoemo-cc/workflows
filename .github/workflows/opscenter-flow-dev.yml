# 部署python-demo仓库代码到开发环境
name: opscenter-flow-dev

on:
  workflow_dispatch:
    inputs:
      ref:
        description: '分支或标签(正式使用的时候不要给默认值)'
        required: true
        type: string

# 参数通过创建模板的api，动态生成
env:
  # <仓库名>-<环境代号>
  flow_artifact_name: "opscenter-flow-dev"
  flow_env: "dev"
  flow_language_type: "python"
  flow_language_version: "3.9.13"
  flow_repository_type: "github"
  flow_repository_address: "aoemo-cc/opscenter-flow"
  flow_repository_user: ""
  flow_repository_password: "${{ secrets.GH_TOKEN }}"
  flow_build_cmd: "echo -e \"\\033[33m我是编译命令\\033[0m\""
  flow_dependency_cmd: "python -m pip install --upgrade pip; [[ -f requirements.txt ]] && pip install -r requirements.txt || echo '没有依赖文件'"
  flow_test_cmd: "python -V"
  # /data/<仓库名>/
  flow_deploy_path: "/data/opscenter-flow"
  flow_deploy_user: "aoemo"
  flow_channel_type: "feishu"
  flow_send_addr: ${{ secrets.FS_ROBOT }}


jobs:
  build:
    name: 编译作业
    runs-on: ubuntu-latest
    steps:
      - name: 创建action存放目录
        run: mkdir -v actions_temp

      - name: 拉取自定义的action
        uses: actions/checkout@v4.1.1
        with:
          path: 'actions_temp'
      - name: 拉代码
        uses: ./actions_temp/.github/actions/action-checkout
        with:
          repo_type: ${{ env.flow_repository_type }}
          repository: ${{ env.flow_repository_address }}
          ref: ${{ inputs.ref }}
          username: ${{ inputs.flow_repository_user }}
          password: ${{ env.flow_repository_password }}

      - name: 编译
        uses: ./actions_temp/.github/actions/action-build
        with:
          language_type: ${{ env.flow_language_type }}
          version: ${{ env.flow_language_version }}
          build_cmd: ${{ env.flow_build_cmd }}

      # 参数通过创建模板的api，动态生成
      - name: 单元测试
        uses: ./actions_temp/.github/actions/action-unit-test
        with:
          dependency_cmd: ${{ env.flow_dependency_cmd }}
          test_cmd: ${{ env.flow_test_cmd }}

      - name: 打包压缩
        run: |
          # 不能删除.github中的内容
          rm -rf .svn* .git .gitignore
          # <仓库名>-<环境代号>.tgz, 参数通过创建模板的api，动态生成
          tar -zcvf ${flow_artifact_name}.tgz --exclude="actions_temp" *
          ls -l ${flow_artifact_name}.tgz && tar -tzvf ${flow_artifact_name}.tgz

      - name: 上传代码包
        uses: actions/upload-artifact@v4.0.0
        with:
          name: "${{ env.flow_artifact_name }}"
          path: "${{ env.flow_artifact_name }}.tgz"
      - name: 作业失败通知
        if: ${{ failure() }}
        uses: ./actions_temp/.github/actions/action-notification
        with:
          channel_type: ${{ env.flow_channel_type }}
          send_addr: ${{ env.flow_send_addr }}
          content: "流水线：${{ github.WORKFLOW }}(${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/actions/runs/${{ github.RUN_ID }})\\n部署次数：${{ github.RUN_NUMBER }}\\n发布环境：${{ env.flow_env }}\\n执行人：${{ github.ACTOR }}\\n当前作业:${{ github.JOB }}\\n运行状态：失败"
  deploy_before:
    name: 部署准备作业
    needs:
      - build
    runs-on: self-hosted
    steps:
      - name: 拉取自定义的action
        uses: actions/checkout@v4.1.1
        with:
          path: "${{ env.flow_artifact_name }}"
      - name: 准备操作
        # uses的值无法使用env定义的变量，参数通过创建模板的api，动态生成
        uses: ./opscenter-flow-dev/.github/actions/action-deploy-readiness
        with:
          artifact_name: "${{ env.flow_artifact_name }}"
      - name: 作业失败通知
        if: ${{ failure() }}
        # uses的值无法使用env定义的变量，参数通过创建模板的api，动态生成
        uses: ./opscenter-flow-dev/.github/actions/action-notification
        with:
          channel_type: ${{ env.flow_channel_type }}
          send_addr: ${{ env.flow_send_addr }}
          content: "流水线：${{ github.WORKFLOW }}(${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/actions/runs/${{ github.RUN_ID }})\\n部署次数：${{ github.RUN_NUMBER }}\\n发布环境：${{ env.flow_env }}\\n执行人：${{ github.ACTOR }}\\n当前作业:${{ github.JOB }}\\n运行状态：失败"
  deploy:
    # environment: prod  # 如果作业想设置人工审核，需要关联环境，并给环境配置保护规则
    name: 主机部署作业
    needs:
      - deploy_before
    runs-on: self-hosted
    strategy:
      # 并发控制
      max-parallel: 200
      matrix:
        # 无法使用env定义的变量，参数通过创建模板的api，动态生成
        host:
          - 127.0.0.1
    steps:
      - name: 执行部署脚本
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          REMOTE_HOST: ${{ matrix.host }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          SOURCE: ${{ github.WORKFLOW }}/${{ env.flow_artifact_name }}.tgz
          TARGET: /tmp/app/
          # # Arguments to pass to rsync
          # ARGS: # optional, default is -rlgoDzvc -i
          SCRIPT_BEFORE: |
            echo -e "\033[36m 我是部署前操作\033[0m"
            echo -e "\033[33m 当前主机ip：$(curl -m 3 -s ifconfig.me)\033[0m"
            echo -e "\033[33m 部署路径: ${{ env.flow_deploy_path }}\033[0m"
            echo -e "\033[33m 部署用户: ${{ env.flow_deploy_user }}\033[0m"

            [[ -d ${{ env.flow_deploy_path }} ]] || mkdir -pv ${{ env.flow_deploy_path }}
            cd ${{ env.flow_deploy_path }} && rm -rf *
          SCRIPT_AFTER: |
            echo -e "\033[36m我是部署后操作\033[0m"
            echo -e "\033[33m当前主机ip：$(curl -m 3 -s ifconfig.me)\033[0m"

            tar -zxvf /tmp/app/${{ env.flow_artifact_name }}.tgz -C ${{ env.flow_deploy_path }}
            chown -R ${{ env.flow_deploy_user }}.${{ env.flow_deploy_user }}  ${{ env.flow_deploy_path }}
            cd ${{ env.flow_deploy_path }} && ls -al .
            pwd
            [[ -f setup.sh ]] && bash setup.sh
            [[ -f restart.sh ]] && bash restart.sh

      - name: 作业失败通知
        if: ${{ failure() }}
        # 参数通过创建模板的api，参数通过创建模板的api，动态生成
        uses: ./opscenter-flow-dev/.github/actions/action-notification
        with:
          channel_type: ${{ env.flow_channel_type }}
          send_addr: ${{ env.flow_send_addr }}
          content: "流水线：${{ github.WORKFLOW }}(${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/actions/runs/${{ github.RUN_ID }})\\n部署次数：${{ github.RUN_NUMBER }}\\n发布环境：${{ env.flow_env }}\\n执行人：${{ github.ACTOR }}\\n当前作业:${{ github.JOB }}\\n运行状态：失败"

  round-off:
    name: 收尾作业
    if: ${{ !cancelled() }}
    needs:
      - deploy
    runs-on: self-hosted
    steps:
      # 需要解决精确清理当前workflow，本次运行产生的内容
      - name: 清理运行器
        run: |
          pwd && ls -at1 ${{ github.workflow }}
          cd ${{ github.workflow }} && rm -rf ./*
      - name: workflow结果通知
        if: ${{ !cancelled() }}
        # uses的值无法使用env定义的变量，参数通过创建模板的api，动态生成
        uses: ./opscenter-flow-dev/.github/actions/action-notification
        with:
          channel_type: ${{ env.flow_channel_type }}
          send_addr: ${{ env.flow_send_addr }}
          # 参数通过创建模板的api，动态生成
          content: "流水线：${{ github.WORKFLOW }}(${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/actions/runs/${{ github.RUN_ID }})\\n部署次数：${{ github.RUN_NUMBER }}\\n仓库地址: https://github.com/aoemo-cc/opscenter-flow.git\\n发布环境：${{ env.flow_env }}\\n执行人：${{ github.ACTOR }}\\n运行状态：成功"
